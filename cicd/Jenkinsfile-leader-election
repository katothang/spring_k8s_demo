pipeline {
    agent any

    tools {
        maven "M3"
    }

    stages {
        stage('checkout project') {
            steps {
                checkout scm
            }
        }
        stage('build project') {
            steps {
                sh "mvn clean install -DskipTests"
            }
        }
        stage('Delete old docker') {
            steps {
                script {
                    def imageExists = sh script: "docker image inspect springk8s-leader-election", returnStatus: true
                    if (imageExists == 0) {
                        sh "docker rmi springk8s-leader-election"
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                sh "docker ps"
                script {
                    echo "print all file current folder"
                    sh "ls"
                    sh "cp target/demo-0.0.1-SNAPSHOT.jar cicd/app.jar"
                    dir('cicd') {
                        sh "docker build -t hub.thangnotes.net/springk8s-leader-election Dockerfile-leader-election"
                    }
                }
            }
        }
        stage('Push Docker repo local') {
            steps {
                script {
                    sh "docker push hub.thangnotes.net/springk8s-leader-election"
                }
            }
        }
        stage('Deploy k8s') {
            environment {
                KUBECONFIG = '/var/jenkins_home/config'
            }
            steps {
                script {
                    dir('cicd') {
                        sh "pwd"
                        sh "kubectl apply -f configmap-leader-election.yaml"
                        sh "kubectl apply -f leader-election.yaml"
                        sh "kubectl rollout restart deployment"
                    }
                }
                // Forward port cluster to local
                script {
                    def port = 1234
                    def isPortAvailable = checkPortAvailability(port)
                    if (isPortAvailable) {
                        //sh "nohup kubectl port-forward service/springk8s-loadbalancer 1234:1234 > /dev/null 2>&1 &"
                        //sh "disown"
                    } else {
                        echo "Port ${port} is already in use."
                    }
                }
            }
        }
    }
}

def checkPortAvailability(port) {
    def proc = "ss -tuln | grep ${port}".execute()
    def output = proc.text
    return output.isEmpty()
}
